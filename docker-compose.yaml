version: "3.8"

services:
  base: &base
    image: chatwoot/chatwoot:latest
    container_name: chatwoot
    hostname: lchatwoot
    env_file: .env
    stdin_open: true
    tty: true
    networks:
      - evolution-network

  rails:
    <<: *base
    container_name: chatwoot-rails
    hostname: chatwoot-rails
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    environment:
      - NODE_ENV=production
      - RAILS_ENV=production
    command: ["bundle", "exec", "rails", "s", "-p", "3000", "-b", "0.0.0.0"]
    restart: unless-stopped

  sidekiq:
    <<: *base
    container_name: chatwoot-sidekiq
    hostname: chatwoot-sidekiq
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      - NODE_ENV=production
      - RAILS_ENV=production
    command: ["bundle", "exec", "sidekiq", "-C", "config/sidekiq.yml"]
    restart: unless-stopped

  postgres:
    image: postgres:12
    container_name: chatwoot-postgres
    hostname: chatwoot-postgres
    restart: unless-stopped
    volumes:
      - ./chatwoot/data/postgres:/var/lib/postgresql/data
    environment:
      - POSTGRES_DB=chatwoot_production
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=chatwoot
    networks:
      - evolution-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 30s
      timeout: 10s
      retries: 5

  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: chatwoot-pgadmin4
    hostname: chatwoot-pgadmin4
    environment:
      PGADMIN_DEFAULT_EMAIL: "demo@demo.com.br"
      PGADMIN_DEFAULT_PASSWORD: "PgAdmin2021!"
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - evolution-network

  redis:
    image: redis:alpine
    container_name: chatwoot-redis
    hostname: chatwoot-redis
    restart: unless-stopped
    command: ["sh", "-c", 'redis-server --requirepass "$REDIS_PASSWORD"']
    env_file: .env
    volumes:
      - ./chatwoot/data/redis:/data
    networks:
      - evolution-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5

  evolution-api:
    build:
      context: .  # Path to the directory containing the Dockerfile
    image: atendai/evolution-api:v2.0.1-beta
    container_name: evolution-api
    hostname: evolution-api
    volumes:
      - ./chatwoot/data/evolution_instances:/evolution/instances
      - ./chatwoot/data/evolution_store:/evolution/store
    env_file:
      - ./evolution-api/.env
    networks:
      - evolution-network
    restart: unless-stopped
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy

  rabbitmq:
    image: rabbitmq:management
    command: rabbitmq-server
    hostname: rabbitmq
    volumes:
      - ./chatwoot/data/rabbitmq:/var/lib/rabbitmq/
    environment:
      - RABBITMQ_ERLANG_COOKIE=admin
      - RABBITMQ_DEFAULT_VHOST=default
      - RABBITMQ_DEFAULT_USER=admin
      - RABBITMQ_DEFAULT_PASS=admin
    networks:
      - evolution-network
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "check_running"]
      interval: 30s
      timeout: 10s
      retries: 5

  nginx:
    build:
      context: ./nginx
      dockerfile: Dockerfile
    container_name: nginx
    entrypoint: nginx -g "daemon off;"
    ports:
      - "8080:8080" # Evolution
      - "8081:8081" # Chatwoot
      - "8082:8082" # pgadmin
      - "8083:8083" # redis
      - "8084:8084" # rabbitmq
    networks:
      - evolution-network
    depends_on:
      - evolution-api

  cloudflared:
    image: cloudflare/cloudflared:latest
    user: root
    command: tunnel run
    environment:
      - "TUNNEL_TOKEN=${CLOUDFLARE_TUNNEL_TOKEN}"
    networks:
      - evolution-network
    restart: no

networks:
  evolution-network:
    name: evolution-network
    driver: bridge
